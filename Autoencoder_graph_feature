


import networkx as nx
import numpy as np
import tensorflow as tf
from tensorflow.keras.layers import Dense, Input
from tensorflow.keras.models import Model

# Function to create a graph from a sentence
def sentence_to_graph(sentence):
    words = sentence.split()
    G = nx.Graph()
    
    # Add nodes
    for i, word in enumerate(words):
        G.add_node(i, feature=np.array([float(char.isdigit()) for char in word], dtype=np.float32))
    
    # Add edges (consecutive words)
    for i in range(len(words) - 1):
        G.add_edge(i, i + 1)
    
    return G

# Function to create node features and adjacency matrix from graph
def graph_to_data(G):
    node_features = np.array([G.nodes[i]['feature'] for i in G.nodes])
    adj_matrix = nx.adjacency_matrix(G).toarray()
    return node_features, adj_matrix

# Example sentence
sentence = "This is an example sentence with digits 123 and 456"

# Convert sentence to graph
G = sentence_to_graph(sentence)

# Convert graph to data
node_features, adj_matrix = graph_to_data(G)



class GraphAutoencoder(Model):
    def __init__(self, input_dim, hidden_dim, latent_dim):
        super(GraphAutoencoder, self).__init__()
        self.encoder = Dense(hidden_dim, activation='relu')
        self.latent = Dense(latent_dim, activation='relu')
        self.decoder = Dense(hidden_dim, activation='relu')
        self.output_layer = Dense(input_dim, activation='sigmoid')
    
    def call(self, x):
        encoded = self.encoder(x)
        latent = self.latent(encoded)
        decoded = self.decoder(latent)
        reconstructed = self.output_layer(decoded)
        return reconstructed

# Hyperparameters
input_dim = node_features.shape[1]
hidden_dim = 64
latent_dim = 32

# Model
autoencoder = GraphAutoencoder(input_dim, hidden_dim, latent_dim)
autoencoder.compile(optimizer='adam', loss='mse')

# Function to extract features using the encoder part of the autoencoder
def extract_features(autoencoder, data):
    encoder_model = Model(inputs=autoencoder.input, outputs=autoencoder.layers[1].output)
    return encoder_model.predict(data)

# Extract features
graph_features = extract_features(autoencoder, X_train)
print(graph_features)
